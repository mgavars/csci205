/* *****************************************
* CSCI205 - Software Engineering and Design
* Spring 2019
* Instructor: Prof. Dancy
* Section: 1pm
*
* Name: Mitch Gavars
* Date: 01/23/2019
*
* Lab / Assignment: Lab03 Methods, and the String class
*
* Description: Learning about branching, interations in the String class, writing static methods, and recursion
*
*
* *****************************************/

### Q1 ###
$ git log --oneline --decorate
bc35e28 (HEAD, master) more work
cccb262 Init commit

### Q2 ###
$ git log --oneline --decorate
bc35e28 (HEAD, myFeature, master) more work
cccb262 Init commit

### Q3 ###
$ git log --oneline --decorate
3738617 (HEAD, myFeature) Adidas NMD Pharrell Inspiration Pack White
2245263 ...testing
bc35e28 (master) more work
cccb262 Init commit

### Q4 ###
$ git diff master
diff --git a/Main.java b/Main.java
index 5e727e2..408349e 100644
--- a/Main.java
+++ b/Main.java
@@ -2,5 +2,7 @@ public class Main {
        public static void main( String[] args ) {
                System.out.println( "Init commit" );
                System.out.println( "more work" );
+               System.out.println( "...testing" );
+               System.out.println( "Adidas NMD Pharrell Inspiration Pack White" );
        }
 }


### Q5 ###
$ git log --oneline --decorate --all
3738617 (myFeature) Adidas NMD Pharrell Inspiration Pack White
2245263 ...testing
bc35e28 (HEAD, master) more work
cccb262 Init commit


### Q6 ###
$ git log --oneline --decorate --all
3738617 (HEAD, myFeature, master) Adidas NMD Pharrell Inspiration Pack White
2245263 ...testing
bc35e28 more work
cccb262 Init commit


Fibonacci Comparison: 
The recursive version of Fibonacci is much more computationally expensive than the non-recursive version because the recursive version must stack each time it recursively calls the method whereas the non-recursive version just keeps looping through until it is complete. My recursive version is not crashing no matter how large the number is, the completion time just keeps drastically increasing.

$ java lab03/Fibonacci
Request your fibonacci number:
48
Recursive fib: 512559680
Time to execute recursive fibonacci: 49741.079417 ms
Non-recursive fib: 512559680
Time to execute non-recursive fibonacci: 0.664241 ms



(1.1) t.length()
	8
(1.2) s.length() + t.length()
	13
(1.3) s + t
	HelloCSCI 205
(1.4) s.substring(2, 5)
	llo
(1.5) s.endsWith("lo")
	True
(1.6) t.charAt(5)
	2
(1.7) t.indexOf('5')
	7
(1.8) s.toUpperCase()
	HELLO
(1.9) t.substring(0,4) + Integer.parseInt(t.substring(5, 7)) * 10
	CSCI200
(1.10) Which is more efficient, and why, or are they both the same?
	"String s = "MyString";" is more efficient because it only creates one string, whereas "String s = new String("MyString");" creates the new string "MyString" but then creates a second string to store the first string. 



